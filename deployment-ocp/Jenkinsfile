node("maven") {
	String stageName = ""
	stageName = "Get Source"	
	stage(stageName) {
		echo "**** START : " + stageName
		
		git branch: 'main', url: 'https://github.com/kkphil83/spring-petclinic.git'
	}
	
	//-- 환경변수 파일 읽어서 변수값 셋팅
	def props = readProperties  file:"./deployment-ocp/pipeline-ocp.properties"  // __custom__
	def version = props["version"]
	def image = props["image"]
	def appname = props["appname"]
	def containername = props["containername"]
	def deployment = props["deployment"]
	def baseDir = props["baseDir"]
	def baseDeployDir = props["baseDeployDir"]
	def namespace = props["namespace"]
	def skipStages = props["skipStages"]
	def ocpClusterDomain = props["ocpClusterDomain"]
	//def imageRegistry = props["imageRegistry"]
	
	// OCP internal registry
	def internalRegistry = props["internalRegistry"]

	// tag를 재정의 함. 이미지 버전이 달라야 배포시 컨테이너에서 인식 
	def now = new Date()
	def tag = version + '-' + now.format("yyMMdd-HHmmss", TimeZone.getTimeZone('Asia/Seoul'))

	try {
		stageName = "Build maven project"
		stage(stageName) {
			echo "**** START : " + stageName + "\n"
			def _dir = pwd();
			echo "path : ${_dir}"
			echo "baseDir : ${baseDir}"
			echo "baseDeployDir : ${baseDeployDir}"
			sh "ls -al"
			container('jnlp') {
				sh "mvn -B -f ${baseDir} -s ./settings.xml clean package"
				echo "*** RESULT ***"
				sh "pwd"
				sh "ls -al ${baseDir}/target"
			}
		}		

		stageName = "Build Container Image"	
		stage(stageName) {
			echo "**** START : " + stageName + "\n"

			container('podman') {
				echo "*** podman Container ***"

				withCredentials([usernamePassword(credentialsId: 'internalRegistry', usernameVariable: 'internalRegistry_user', passwordVariable: 'internalRegistry_pw')]) {
					sh "podman login -u $internalRegistry_user ${internalRegistry} --tls-verify=false -p '$internalRegistry_pw'"
					sh "podman build -f ${baseDir}${baseDeployDir}/Dockerfile -t ${internalRegistry}/${namespace}/${image}:${tag} ${WORKSPACE}  --tls-verify=false"
					sh "podman push ${internalRegistry}/${namespace}/${image}:${tag} --tls-verify=false"
					sh "podman tag ${internalRegistry}/${namespace}/${image}:${tag} ${internalRegistry}/${namespace}/${image}:latest"
					sh "podman push ${internalRegistry}/${namespace}/${image}:latest --tls-verify=false"
				}
			}
		}
						
		stageName = "Deploy to Cluster"
		stage( stageName ) {
			echo "\n******* START : " + stageName + "\n"

			sh "oc get deploy ${appname} -n ${namespace} | grep ${appname} | wc -l > existed.txt"

			def existed = sh(script: 'cat existed.txt', returnStdout: true)
			def toIntOrNull = { it?.isInteger() ? it.toInteger() : null }

			if(toIntOrNull(existed) > 0){
				echo "\n******* Rolling Update ***********************\n"
				sh "oc set image deployment/${appname} ${containername}=${internalRegistry}/${namespace}/${image}:${tag} --record -n ${namespace}"
				sh "oc rollout status deployment.v1.apps/${appname} -n ${namespace}"
			}else{
				echo "\n******* Initial Deploy ***********************\n"
				sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${deployment}"
				sh "oc expose service ${appname} --hostname ${appname}-${namespace}.apps.${ocpClusterDomain} -n ${namespace}"
			}

			echo "\n****** RESULT ******\n"
			sh "oc get deployment -n ${namespace}"
			sh "oc get svc -n ${namespace}"
			sh "oc get route -n ${namespace}"
		}
			
			
		echo "**** FINISH ALL STAGES : SUCESS"
		echo " petclinic URL : http://${appname}-${namespace}.apps.${ocpClusterDomain}/"
		
	} catch(e) {
		currentBuild.result = "FAILED"			
	}
}